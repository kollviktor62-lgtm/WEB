<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Black HAWK - Система управления ботами</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #0a0e27;
            --bg-secondary: #151a3a;
            --bg-card: #1e2447;
            --accent-primary: #7c5cff;
            --accent-secondary: #5ac8ff;
            --accent-success: #2bd99a;
            --accent-warning: #ffb020;
            --accent-danger: #ff5c7c;
            --text-primary: #e6eef3;
            --text-secondary: #9aa3b2;
            --border: #2a3154;
            --glow: 0 0 20px rgba(124, 92, 255, 0.3);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            color: var(--text-primary);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        /* Animated background */
        body::before {
            content: '';
            position: fixed;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(124, 92, 255, 0.1) 1%, transparent 71%);
            animation: rotate 30s linear infinite;
            z-index: -1;
        }

        @keyframes rotate {
            to { transform: rotate(360deg); }
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            background: rgba(30, 36, 71, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 25px 30px;
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
        }

        .logo-text h1 {
            font-size: 24px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .logo-text p {
            font-size: 12px;
            color: var(--text-secondary);
            margin-top: 4px;
        }

        .header-actions {
            display: flex;
            gap: 15px;
        }

        /* Navigation */
        .nav {
            background: rgba(30, 36, 71, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 10px;
            margin-bottom: 30px;
            display: flex;
            gap: 5px;
            overflow-x: auto;
        }

        .nav-item {
            padding: 12px 24px;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s;
            white-space: nowrap;
            font-weight: 500;
        }

        .nav-item:hover {
            background: rgba(124, 92, 255, 0.1);
            color: var(--text-primary);
        }

        .nav-item.active {
            background: var(--accent-primary);
            color: white;
            box-shadow: var(--glow);
        }

        /* Main Grid */
        .main-grid {
            display: grid;
            grid-template-columns: 300px 1fr 350px;
            gap: 20px;
            margin-bottom: 30px;
        }

        /* Cards */
        .card {
            background: rgba(30, 36, 71, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 20px;
            transition: all 0.3s;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 40px rgba(124, 92, 255, 0.2);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
        }

        /* Buttons */
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent-primary), #9b7fff);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(124, 92, 255, 0.4);
        }

        .btn-success {
            background: var(--accent-success);
            color: white;
        }

        .btn-danger {
            background: var(--accent-danger);
            color: white;
        }

        .btn-warning {
            background: var(--accent-warning);
            color: white;
        }

        .btn-secondary {
            background: rgba(154, 163, 178, 0.2);
            color: var(--text-primary);
            border: 1px solid var(--border);
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 13px;
        }

        /* Bot Cards */
        .bot-card {
            background: rgba(42, 49, 84, 0.6);
            border: 1px solid var(--border);
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s;
        }

        .bot-card:hover {
            background: rgba(124, 92, 255, 0.1);
            border-color: var(--accent-primary);
        }

        .bot-card.active {
            border-color: var(--accent-primary);
            background: rgba(124, 92, 255, 0.2);
        }

        .bot-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 10px;
        }

        .bot-info h3 {
            font-size: 16px;
            margin-bottom: 5px;
        }

        .bot-info p {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .bot-status {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 12px;
            background: rgba(43, 217, 154, 0.2);
            color: var(--accent-success);
        }

        .bot-status.inactive {
            background: rgba(154, 163, 178, 0.2);
            color: var(--text-secondary);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: currentColor;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .bot-actions {
            display: flex;
            gap: 8px;
            margin-top: 10px;
        }

        /* Settings Panel */
        .settings-section {
            margin-bottom: 25px;
        }

        .settings-section h4 {
            font-size: 14px;
            color: var(--text-secondary);
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .toggle-group {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .toggle-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: rgba(42, 49, 84, 0.4);
            border-radius: 12px;
            transition: all 0.3s;
        }

        .toggle-item:hover {
            background: rgba(124, 92, 255, 0.1);
        }

        .toggle-label {
            display: flex;
            flex-direction: column;
            gap: 3px;
        }

        .toggle-label span {
            font-size: 14px;
        }

        .toggle-label small {
            font-size: 11px;
            color: var(--text-secondary);
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            width: 50px;
            height: 26px;
            background: rgba(154, 163, 178, 0.3);
            border-radius: 13px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .toggle-switch.active {
            background: var(--accent-primary);
        }

        .toggle-switch::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: white;
            top: 3px;
            left: 3px;
            transition: all 0.3s;
        }

        .toggle-switch.active::after {
            left: 27px;
        }

        /* Input Fields */
        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 13px;
            color: var(--text-secondary);
        }

        .input, .select, .textarea {
            width: 100%;
            padding: 10px 15px;
            background: rgba(42, 49, 84, 0.6);
            border: 1px solid var(--border);
            border-radius: 10px;
            color: var(--text-primary);
            transition: all 0.3s;
        }

        .input:focus, .select:focus, .textarea:focus {
            outline: none;
            border-color: var(--accent-primary);
            background: rgba(124, 92, 255, 0.1);
        }

        .textarea {
            resize: vertical;
            min-height: 100px;
        }

        /* Keywords */
        .keyword-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 15px;
        }

        .keyword-tag {
            padding: 6px 12px;
            background: rgba(124, 92, 255, 0.2);
            border: 1px solid var(--accent-primary);
            border-radius: 20px;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .keyword-tag .remove {
            cursor: pointer;
            color: var(--accent-danger);
            font-weight: bold;
        }

        /* Logs */
        .log-item {
            padding: 12px;
            background: rgba(42, 49, 84, 0.4);
            border-radius: 10px;
            margin-bottom: 10px;
            border-left: 3px solid var(--accent-primary);
        }

        .log-time {
            font-size: 11px;
            color: var(--text-secondary);
            margin-bottom: 5px;
        }

        .log-content {
            font-size: 13px;
            line-height: 1.5;
        }

        .log-bot {
            font-weight: 600;
            color: var(--accent-primary);
        }

        /* Stats */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: rgba(42, 49, 84, 0.4);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
        }

        .stat-value {
            font-size: 28px;
            font-weight: bold;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stat-label {
            font-size: 12px;
            color: var(--text-secondary);
            margin-top: 5px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
        }

        .modal-close {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: rgba(255, 92, 124, 0.2);
            color: var(--accent-danger);
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .modal-close:hover {
            background: var(--accent-danger);
            color: white;
        }

        /* Live indicator */
        .live-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 6px 12px;
            background: rgba(43, 217, 154, 0.2);
            border-radius: 20px;
            font-size: 12px;
            color: var(--accent-success);
        }

        .live-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--accent-success);
            animation: pulse 2s infinite;
        }

        /* Channel Cards */
        .channel-card {
            background: rgba(42, 49, 84, 0.6);
            border: 1px solid var(--border);
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s;
        }

        .channel-card:hover {
            background: rgba(124, 92, 255, 0.1);
            border-color: var(--accent-primary);
        }

        .channel-info {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 10px;
        }

        .channel-name {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .channel-stats {
            display: flex;
            gap: 15px;
            margin-top: 5px;
        }

        .channel-stat {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .channel-actions {
            display: flex;
            gap: 8px;
            margin-top: 10px;
        }

        /* Tabs */
        .tabs {
            display: flex;
            gap: 5px;
            margin-bottom: 20px;
            background: rgba(42, 49, 84, 0.4);
            padding: 5px;
            border-radius: 12px;
        }

        .tab {
            padding: 8px 16px;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 14px;
        }

        .tab:hover {
            color: var(--text-primary);
        }

        .tab.active {
            background: var(--accent-primary);
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Loading */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(124, 92, 255, 0.3);
            border-top-color: var(--accent-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="logo">
                <div class="logo-icon">🦅</div>
                <div class="logo-text">
                    <h1>Black HAWK</h1>
                    <p>Система управления ботами @blackpelikan</p>
                </div>
            </div>
            <div class="header-actions">
                <button class="btn btn-primary" onclick="openCreateBotModal()">
                    ➕ Создать бота
                </button>
                <button class="btn btn-warning" onclick="openAddChannelModal()">
                    📢 Добавить канал
                </button>
            </div>
        </div>

        <!-- Navigation -->
        <div class="nav">
            <button class="nav-item active" onclick="showSection('dashboard')">📊 Главная</button>
            <button class="nav-item" onclick="showSection('bots')">🤖 Боты</button>
            <button class="nav-item" onclick="showSection('tasks')">⚙️ Задачи AI</button>
            <button class="nav-item" onclick="showSection('channels')">📢 Чаты и Каналы</button>
            <button class="nav-item" onclick="showSection('analytics')">📈 Аналитика</button>
            <button class="nav-item" onclick="showSection('settings')">⚡ Настройки</button>
        </div>

        <!-- Dashboard Section -->
        <div id="dashboard" class="section active">
            <div class="main-grid">
                <!-- Bot List -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">🤖 Боты</h3>
                        <span class="live-indicator">
                            <span class="live-dot"></span>
                            LIVE
                        </span>
                    </div>
                    <div id="botList">
                        <!-- Bots will be populated here -->
                    </div>
                    <button class="btn btn-primary btn-sm" onclick="openCreateBotModal()">
                        ➕ Добавить бота
                    </button>
                </div>

                <!-- Central Panel -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Управление ботом</h3>
                    </div>
                    <div id="botDetails">
                        <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                            Выберите бота для управления
                        </div>
                    </div>
                </div>

                <!-- Logs -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">📋 Логи / Действия</h3>
                        <span class="live-indicator">
                            <span class="live-dot"></span>
                            LIVE
                        </span>
                    </div>
                    <div id="logsList" style="max-height: 500px; overflow-y: auto;">
                        <!-- Logs will be populated here -->
                    </div>
                    <div class="stats-grid" style="margin-top: 20px;">
                        <div class="stat-card">
                            <div class="stat-value">1234</div>
                            <div class="stat-label">Сообщений</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">6.4%</div>
                            <div class="stat-label">CTR</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bots Section -->
        <div id="bots" class="section" style="display: none;">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Управление ботами</h3>
                    <button class="btn btn-primary" onclick="openCreateBotModal()">
                        ➕ Создать бота
                    </button>
                </div>
                <div class="tabs">
                    <button class="tab active" onclick="showBotTab('all')">Все боты</button>
                    <button class="tab" onclick="showBotTab('active')">Активные</button>
                    <button class="tab" onclick="showBotTab('inactive')">Неактивные</button>
                </div>
                <div id="botsGrid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">
                    <!-- Bot cards will be populated here -->
                </div>
            </div>
        </div>

        <!-- Tasks Section -->
        <div id="tasks" class="section" style="display: none;">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Задачи AI</h3>
                    <button class="btn btn-primary" onclick="openTaskModal()">
                        ➕ Создать задачу
                    </button>
                </div>
                <div class="toggle-group">
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>🔄 Зеркалирование + картинка</span>
                            <small>Парсинг каналов с AI анализом</small>
                        </div>
                        <div class="toggle-actions" style="display: flex; gap: 8px;">
                            <div class="toggle-switch active" onclick="toggleSwitch(this)"></div>
                            <button class="btn btn-secondary btn-sm" onclick="openTaskSettings('mirror')">⚙️</button>
                        </div>
                    </div>
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>📝 Переработка поста (анализ)</span>
                            <small>Полная переработка с мнением AI</small>
                        </div>
                        <div class="toggle-actions" style="display: flex; gap: 8px;">
                            <div class="toggle-switch active" onclick="toggleSwitch(this)"></div>
                            <button class="btn btn-secondary btn-sm" onclick="openTaskSettings('rewrite')">⚙️</button>
                        </div>
                    </div>
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>💬 Авто-комментарии</span>
                            <small>AI комментарии на посты</small>
                        </div>
                        <div class="toggle-actions" style="display: flex; gap: 8px;">
                            <div class="toggle-switch" onclick="toggleSwitch(this)"></div>
                            <button class="btn btn-secondary btn-sm" onclick="openTaskSettings('comment')">⚙️</button>
                        </div>
                    </div>
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>📮 Рассылка в чаты (диалог)</span>
                            <small>Поддержание диалога с переходом в канал</small>
                        </div>
                        <div class="toggle-actions" style="display: flex; gap: 8px;">
                            <div class="toggle-switch active" onclick="toggleSwitch(this)"></div>
                            <button class="btn btn-secondary btn-sm" onclick="openTaskSettings('broadcast')">⚙️</button>
                        </div>
                    </div>
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>❤️ Реакции</span>
                            <small>AI выбор реакций на сообщения</small>
                        </div>
                        <div class="toggle-actions" style="display: flex; gap: 8px;">
                            <div class="toggle-switch active" onclick="toggleSwitch(this)"></div>
                            <button class="btn btn-secondary btn-sm" onclick="openTaskSettings('react')">⚙️</button>
                        </div>
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <h4 style="margin-bottom: 15px;">📝 Шаблоны AI</h4>
                    <div id="templatesList">
                        <!-- Templates will be populated here -->
                    </div>
                    <button class="btn btn-secondary btn-sm" onclick="openTemplateModal()">
                        ➕ Добавить шаблон
                    </button>
                </div>
            </div>
        </div>

        <!-- Channels Section -->
        <div id="channels" class="section" style="display: none;">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Сохранённые чаты и каналы</h3>
                    <button class="btn btn-warning" onclick="openAddChannelModal()">
                        ➕ Добавить чат/канал
                    </button>
                </div>
                <div id="channelsList">
                    <!-- Channels will be populated here -->
                </div>
            </div>
        </div>

        <!-- Analytics Section -->
        <div id="analytics" class="section" style="display: none;">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">📊 Аналитика системы</h3>
                </div>
                <div class="tabs">
                    <button class="tab active" onclick="showAnalyticsTab('overview')">Обзор</button>
                    <button class="tab" onclick="showAnalyticsTab('bots')">По ботам</button>
                    <button class="tab" onclick="showAnalyticsTab('ai')">AI производительность</button>
                    <button class="tab" onclick="showAnalyticsTab('channels')">Каналы</button>
                </div>
                <div id="analyticsContent">
                    <!-- Analytics content will be populated here -->
                </div>
            </div>
        </div>

        <!-- Settings Section -->
        <div id="settings" class="section" style="display: none;">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">⚙️ Настройки системы</h3>
                </div>
                <div class="settings-section">
                    <h4>Ключевые слова</h4>
                    <div class="keyword-list" id="keywordsList">
                        <!-- Keywords will be populated here -->
                    </div>
                    <button class="btn btn-secondary btn-sm" onclick="addKeyword()">
                        ➕ Добавить ключевое слово
                    </button>
                </div>

                <div class="settings-section">
                    <h4>Направление парсинга AI</h4>
                    <div class="input-group">
                        <textarea class="textarea" id="aiDirection" placeholder="Введите направление для AI..."></textarea>
                    </div>
                    <button class="btn btn-primary" onclick="saveAIDirection()">
                        💾 Сохранить направление
                    </button>
                    <div id="savedDirections" style="margin-top: 15px;">
                        <!-- Saved directions will be shown here -->
                    </div>
                </div>

                <div class="settings-section">
                    <h4>Эмодзи для реакций</h4>
                    <div class="keyword-list" id="emojiList">
                        <!-- Emojis will be populated here -->
                    </div>
                    <button class="btn btn-secondary btn-sm" onclick="addEmoji()">
                        ➕ Добавить эмодзи
                    </button>
                </div>

                <div class="settings-section">
                    <h4>Логи системы</h4>
                    <button class="btn btn-secondary" onclick="viewSystemLogs()">
                        📋 Просмотреть логи
                    </button>
                    <button class="btn btn-danger" onclick="clearLogs()">
                        🗑️ Очистить логи
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <!-- Create Bot Modal -->
    <div id="createBotModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Создать нового бота</h2>
                <button class="modal-close" onclick="closeModal('createBotModal')">✕</button>
            </div>
            <div class="input-group">
                <label>Название бота</label>
                <input type="text" class="input" id="botName" placeholder="Например: Parser-AI-1">
            </div>
            <div class="input-group">
                <label>Номер телефона</label>
                <input type="tel" class="input" id="botPhone" placeholder="+7 900 000-00-00">
            </div>
            <div style="display: flex; gap: 10px;">
                <button class="btn btn-primary" onclick="sendCode()">
                    📱 Отправить код
                </button>
            </div>
            <div id="codeInput" style="display: none; margin-top: 20px;">
                <div class="input-group">
                    <label>Код из Telegram</label>
                    <input type="text" class="input" id="smsCode" placeholder="00000">
                </div>
                <button class="btn btn-success" onclick="verifyCode()">
                    ✓ Подтвердить
                </button>
            </div>
        </div>
    </div>

    <!-- Add Channel Modal -->
    <div id="addChannelModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Добавить канал/чат</h2>
                <button class="modal-close" onclick="closeModal('addChannelModal')">✕</button>
            </div>
            <div class="input-group">
                <label>Username или ID канала</label>
                <input type="text" class="input" id="channelUsername" placeholder="@channel_name или ID">
            </div>
            <div class="input-group">
                <label>Тип</label>
                <select class="select" id="channelType">
                    <option value="channel">Канал</option>
                    <option value="group">Группа</option>
                    <option value="chat">Чат</option>
                </select>
            </div>
            <button class="btn btn-primary" onclick="addChannel()">
                ➕ Добавить
            </button>
        </div>
    </div>

    <!-- Task Settings Modal -->
    <div id="taskSettingsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="taskSettingsTitle">Настройки задачи</h2>
                <button class="modal-close" onclick="closeModal('taskSettingsModal')">✕</button>
            </div>
            <div id="taskSettingsContent">
                <!-- Dynamic content based on task type -->
            </div>
        </div>
    </div>

    <!-- Template Modal -->
    <div id="templateModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Добавить шаблон AI</h2>
                <button class="modal-close" onclick="closeModal('templateModal')">✕</button>
            </div>
            <div class="input-group">
                <label>Название шаблона</label>
                <input type="text" class="input" id="templateName" placeholder="Название">
            </div>
            <div class="input-group">
                <label>Тип шаблона</label>
                <select class="select" id="templateType">
                    <option value="mirror">Зеркалирование</option>
                    <option value="rewrite">Переработка</option>
                    <option value="comment">Комментарий</option>
                    <option value="broadcast">Диалог</option>
                    <option value="react">Реакция</option>
                </select>
            </div>
            <div class="input-group">
                <label>Промпт</label>
                <textarea class="textarea" id="templatePrompt" placeholder="Введите промпт для AI..."></textarea>
            </div>
            <button class="btn btn-primary" onclick="saveTemplate()">
                💾 Сохранить шаблон
            </button>
        </div>
    </div>

    <!-- Bot Settings Modal -->
    <div id="botSettingsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Настройки бота</h2>
                <button class="modal-close" onclick="closeModal('botSettingsModal')">✕</button>
            </div>
            <div id="botSettingsContent">
                <!-- Bot settings will be populated here -->
            </div>
        </div>
    </div>

    <script>
        // State management
        let state = {
            bots: [],
            channels: [],
            logs: [],
            keywords: ['crypto', 'политика', 'новости', 'экономика', 'технологии'],
            emojis: ['👍', '🔥', '😂', '🤔', '💯', '❤️', '😎', '🚀'],
            templates: [],
            selectedBot: null,
            aiDirections: []
        };

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            startWebSocket();
        });

        function initializeApp() {
            // Load initial data
            loadBots();
            loadChannels();
            loadLogs();
            loadTemplates();
            renderKeywords();
            renderEmojis();
        }

        // WebSocket for real-time updates
        function startWebSocket() {
            // Simulate WebSocket connection for real-time logs
            setInterval(() => {
                addRandomLog();
            }, 5000);
        }

        // Navigation
        function showSection(sectionId) {
            // Hide all sections
            document.querySelectorAll('.section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Show selected section
            document.getElementById(sectionId).style.display = 'block';
            
            // Update nav
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        // Bots Management
        function loadBots() {
            state.bots = [
                { id: 1, name: 'Parser-AI-1', phone: '+7 900 111-22-33', status: 'active', lastSeen: new Date() },
                { id: 2, name: 'Responder-3', phone: '+7 900 222-33-44', status: 'inactive', lastSeen: new Date() },
                { id: 3, name: 'Mirror-2', phone: '+7 900 333-44-55', status: 'active', lastSeen: new Date() }
            ];
            renderBots();
        }

        function renderBots() {
            const botList = document.getElementById('botList');
            if (botList) {
                botList.innerHTML = state.bots.map(bot => `
                    <div class="bot-card ${bot.id === state.selectedBot?.id ? 'active' : ''}" onclick="selectBot(${bot.id})">
                        <div class="bot-header">
                            <div class="bot-info">
                                <h3>${bot.name}</h3>
                                <p>${bot.phone} • ID: bot_${bot.id}</p>
                            </div>
                            <div class="bot-status ${bot.status === 'active' ? '' : 'inactive'}">
                                <span class="status-dot"></span>
                                ${bot.status === 'active' ? 'Активен' : 'Остановлен'}
                            </div>
                        </div>
                        <div class="bot-actions">
                            <button class="btn btn-secondary btn-sm" onclick="event.stopPropagation(); toggleBot(${bot.id})">
                                ${bot.status === 'active' ? '⏸️ Стоп' : '▶️ Старт'}
                            </button>
                            <button class="btn btn-warning btn-sm" onclick="event.stopPropagation(); restartBot(${bot.id})">
                                🔄 Рестарт
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="event.stopPropagation(); deleteBot(${bot.id})">
                                🗑️ Удалить
                            </button>
                        </div>
                    </div>
                `).join('');
            }
        }

        function selectBot(botId) {
            state.selectedBot = state.bots.find(b => b.id === botId);
            renderBots();
            renderBotDetails();
        }

        function renderBotDetails() {
            const botDetails = document.getElementById('botDetails');
            if (!state.selectedBot || !botDetails) return;

            botDetails.innerHTML = `
                <h2>${state.selectedBot.name}</h2>
                <p style="color: var(--text-secondary); margin-bottom: 20px;">
                    ${state.selectedBot.phone} • ID: bot_${state.selectedBot.id}
                </p>
                
                <div class="settings-section">
                    <h4>⚙️ Задачи (AI)</h4>
                    <div class="toggle-group">
                        <div class="toggle-item">
                            <span>Зеркалирование + картинка</span>
                            <div class="toggle-switch active" onclick="toggleBotTask(this, 'mirror')"></div>
                        </div>
                        <div class="toggle-item">
                            <span>Переработка поста (анализ)</span>
                            <div class="toggle-switch active" onclick="toggleBotTask(this, 'rewrite')"></div>
                        </div>
                        <div class="toggle-item">
                            <span>Авто-комментарии</span>
                            <div class="toggle-switch" onclick="toggleBotTask(this, 'comment')"></div>
                        </div>
                        <div class="toggle-item">
                            <span>Рассылка в чаты (диалог)</span>
                            <div class="toggle-switch active" onclick="toggleBotTask(this, 'broadcast')"></div>
                        </div>
                        <div class="toggle-item">
                            <span>Реакции</span>
                            <div class="toggle-switch active" onclick="toggleBotTask(this, 'react')"></div>
                        </div>
                    </div>
                </div>

                <div class="settings-section">
                    <h4>📊 Параметры ИИ</h4>
                    <div class="input-group">
                        <label>Режим ответа</label>
                        <select class="select">
                            <option>Аналитический</option>
                            <option>Дерзко</option>
                            <option>Вежливо</option>
                            <option>Нейтрально</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label>Направление парсинга</label>
                        <input type="text" class="input" value="аналитика и факты">
                    </div>
                    <div class="input-group">
                        <label>Макс. сообщений в час</label>
                        <input type="number" class="input" value="120">
                    </div>
                    <button class="btn btn-primary" onclick="saveBotSettings()">
                        💾 Сохранить настройки
                    </button>
                </div>

                <div class="settings-section">
                    <h4>🎯 Ручные операции</h4>
                    <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                        <button class="btn btn-secondary">📝 Отправить комментарий</button>
                        <button class="btn btn-secondary">❤️ Выставить реакцию</button>
                        <button class="btn btn-secondary">💾 Сохранить канал</button>
                    </div>
                </div>
            `;
        }

        function toggleBot(botId) {
            const bot = state.bots.find(b => b.id === botId);
            if (bot) {
                bot.status = bot.status === 'active' ? 'inactive' : 'active';
                renderBots();
                addLog(`Bot ${bot.name}`, bot.status === 'active' ? 'Запущен' : 'Остановлен');
            }
        }

        function restartBot(botId) {
            const bot = state.bots.find(b => b.id === botId);
            if (bot) {
                addLog(`Bot ${bot.name}`, 'Перезапущен');
                showNotification('Бот перезапущен', 'success');
            }
        }

        function deleteBot(botId) {
            if (confirm('Вы уверены, что хотите удалить этого бота?')) {
                state.bots = state.bots.filter(b => b.id !== botId);
                if (state.selectedBot?.id === botId) {
                    state.selectedBot = null;
                }
                renderBots();
                addLog('System', `Бот удален: bot_${botId}`);
                showNotification('Бот удален', 'danger');
            }
        }

        function toggleBotTask(element, taskType) {
            element.classList.toggle('active');
            const isActive = element.classList.contains('active');
            addLog(`Bot ${state.selectedBot.name}`, `${taskType} ${isActive ? 'включен' : 'выключен'}`);
        }

        function saveBotSettings() {
            showNotification('Настройки сохранены', 'success');
            addLog(`Bot ${state.selectedBot.name}`, 'Настройки обновлены');
        }

        // Channels Management
        function loadChannels() {
            state.channels = [
                { id: 1, username: '@crypto_signals', type: 'channel', members: 15234, active: true },
                { id: 2, username: '@tech_news', type: 'channel', members: 8921, active: true },
                { id: 3, username: 'Traders Chat', type: 'group', members: 523, active: true },
                { id: 4, username: '@finance_pro', type: 'channel', members: 45678, active: false }
            ];
            renderChannels();
        }

        function renderChannels() {
            const channelsList = document.getElementById('channelsList');
            if (channelsList) {
                channelsList.innerHTML = state.channels.map(channel => `
                    <div class="channel-card">
                        <div class="channel-info">
                            <div>
                                <div class="channel-name">${channel.username}</div>
                                <div class="channel-stats">
                                    <span class="channel-stat">Тип: ${channel.type === 'channel' ? 'Канал' : 'Группа'}</span>
                                    <span class="channel-stat">Участников: ${channel.members.toLocaleString()}</span>
                                    <span class="channel-stat">Активность: ${channel.active ? 'Активен' : 'Неактивен'}</span>
                                </div>
                            </div>
                            <div class="status-dot" style="background: ${channel.active ? 'var(--accent-success)' : 'var(--text-secondary)'}"></div>
                        </div>
                        <div class="channel-actions">
                            <button class="btn btn-primary btn-sm" onclick="parseChannel(${channel.id})">
                                🔍 Парсить
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="viewChannelInfo(${channel.id})">
                                ℹ️ Информация
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="removeChannel(${channel.id})">
                                🗑️ Удалить
                            </button>
                        </div>
                    </div>
                `).join('');
            }
        }

        function addChannel() {
            const username = document.getElementById('channelUsername').value;
            const type = document.getElementById('channelType').value;
            
            if (username) {
                const newChannel = {
                    id: state.channels.length + 1,
                    username: username,
                    type: type,
                    members: Math.floor(Math.random() * 50000),
                    active: true
                };
                state.channels.push(newChannel);
                renderChannels();
                closeModal('addChannelModal');
                showNotification('Канал добавлен', 'success');
                addLog('System', `Добавлен канал: ${username}`);
            }
        }

        function parseChannel(channelId) {
            const channel = state.channels.find(c => c.id === channelId);
            if (channel) {
                showNotification(`Начат парсинг ${channel.username}`, 'info');
                addLog('Parser', `Парсинг канала ${channel.username}`);
            }
        }

        function viewChannelInfo(channelId) {
            const channel = state.channels.find(c => c.id === channelId);
            if (channel) {
                alert(`Информация о канале:\n\nНазвание: ${channel.username}\nТип: ${channel.type}\nУчастников: ${channel.members}\nСтатус: ${channel.active ? 'Активен' : 'Неактивен'}`);
            }
        }

        function removeChannel(channelId) {
            if (confirm('Удалить этот канал?')) {
                state.channels = state.channels.filter(c => c.id !== channelId);
                renderChannels();
                showNotification('Канал удален', 'danger');
            }
        }

        // Logs Management
        function loadLogs() {
            state.logs = [
                { time: new Date(), bot: 'Parser-AI-1', message: 'Скачан пост из @news_channel: "Цена биткоина..."' },
                { time: new Date(), bot: 'Parser-AI-1', message: 'Сгенерирована картинка для поста (image_9821.png)' },
                { time: new Date(), bot: 'Mirror-2', message: 'Отправлен репост в @blackpelikan' },
                { time: new Date(), bot: 'Responder-3', message: 'Отправлен комментарий в @chat_trader' }
            ];
            renderLogs();
        }

        function renderLogs() {
            const logsList = document.getElementById('logsList');
            if (logsList) {
                logsList.innerHTML = state.logs.slice(-20).reverse().map(log => `
                    <div class="log-item">
                        <div class="log-time">${formatTime(log.time)}</div>
                        <div class="log-content">
                            <span class="log-bot">${log.bot}:</span> ${log.message}
                        </div>
                    </div>
                `).join('');
            }
        }

        function addLog(bot, message) {
            state.logs.push({ time: new Date(), bot, message });
            renderLogs();
        }

        function addRandomLog() {
            const bots = ['Parser-AI-1', 'Mirror-2', 'Responder-3'];
            const actions = [
                'Скачан пост из канала',
                'Отправлен комментарий',
                'Выставлена реакция',
                'Переработан пост через AI',
                'Отправлено в @blackpelikan'
            ];
            const bot = bots[Math.floor(Math.random() * bots.length)];
            const action = actions[Math.floor(Math.random() * actions.length)];
            addLog(bot, action);
        }

        // Templates Management
        function loadTemplates() {
            state.templates = [
                { id: 1, name: 'Аналитический разбор', type: 'mirror', prompt: 'Проанализируй пост...' },
                { id: 2, name: 'Дерзкий комментарий', type: 'comment', prompt: 'Напиши дерзкий комментарий...' },
                { id: 3, name: 'Приглашение в канал', type: 'broadcast', prompt: 'Пригласи в @blackpelikan...' }
            ];
            renderTemplates();
        }

        function renderTemplates() {
            const templatesList = document.getElementById('templatesList');
            if (templatesList) {
                templatesList.innerHTML = state.templates.map(template => `
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>${template.name}</span>
                            <small>Тип: ${template.type}</small>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            <button class="btn btn-secondary btn-sm" onclick="editTemplate(${template.id})">✏️</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteTemplate(${template.id})">🗑️</button>
                        </div>
                    </div>
                `).join('');
            }
        }

        function saveTemplate() {
            const name = document.getElementById('templateName').value;
            const type = document.getElementById('templateType').value;
            const prompt = document.getElementById('templatePrompt').value;
            
            if (name && prompt) {
                state.templates.push({
                    id: state.templates.length + 1,
                    name,
                    type,
                    prompt
                });
                renderTemplates();
                closeModal('templateModal');
                showNotification('Шаблон сохранен', 'success');
            }
        }

        function editTemplate(templateId) {
            const template = state.templates.find(t => t.id === templateId);
            if (template) {
                document.getElementById('templateName').value = template.name;
                document.getElementById('templateType').value = template.type;
                document.getElementById('templatePrompt').value = template.prompt;
                openModal('templateModal');
            }
        }

        function deleteTemplate(templateId) {
            if (confirm('Удалить этот шаблон?')) {
                state.templates = state.templates.filter(t => t.id !== templateId);
                renderTemplates();
                showNotification('Шаблон удален', 'danger');
            }
        }

        // Task Settings
        function openTaskSettings(taskType) {
            const modal = document.getElementById('taskSettingsModal');
            const title = document.getElementById('taskSettingsTitle');
            const content = document.getElementById('taskSettingsContent');
            
            const titles = {
                mirror: 'Настройки зеркалирования',
                rewrite: 'Настройки переработки',
                comment: 'Настройки комментариев',
                broadcast: 'Настройки рассылки',
                react: 'Настройки реакций'
            };
            
            title.textContent = titles[taskType];
            
            content.innerHTML = `
                <div class="input-group">
                    <label>Шаблон</label>
                    <select class="select">
                        ${state.templates.filter(t => t.type === taskType).map(t => 
                            `<option value="${t.id}">${t.name}</option>`
                        ).join('')}
                    </select>
                </div>
                <div class="input-group">
                    <label>Частота выполнения</label>
                    <select class="select">
                        <option>Каждые 5 минут</option>
                        <option>Каждые 15 минут</option>
                        <option>Каждый час</option>
                        <option>Вручную</option>
                    </select>
                </div>
                <div class="input-group">
                    <label>Каналы для ${taskType === 'mirror' ? 'парсинга' : 'работы'}</label>
                    <select class="select" multiple style="height: 100px;">
                        ${state.channels.map(c => 
                            `<option value="${c.id}">${c.username}</option>`
                        ).join('')}
                    </select>
                </div>
                <button class="btn btn-primary" onclick="saveTaskSettings('${taskType}')">
                    💾 Сохранить настройки
                </button>
                <button class="btn btn-danger" onclick="deleteTaskSettings('${taskType}')">
                    🗑️ Удалить задачу
                </button>
            `;
            
            openModal('taskSettingsModal');
        }

        function saveTaskSettings(taskType) {
            closeModal('taskSettingsModal');
            showNotification(`Настройки ${taskType} сохранены`, 'success');
            addLog('System', `Обновлены настройки задачи: ${taskType}`);
        }

        function deleteTaskSettings(taskType) {
            if (confirm('Удалить эту задачу?')) {
                closeModal('taskSettingsModal');
                showNotification(`Задача ${taskType} удалена`, 'danger');
                addLog('System', `Удалена задача: ${taskType}`);
            }
        }

        // Keywords & Emojis
        function renderKeywords() {
            const keywordsList = document.getElementById('keywordsList');
            if (keywordsList) {
                keywordsList.innerHTML = state.keywords.map((keyword, index) => `
                    <div class="keyword-tag">
                        ${keyword}
                        <span class="remove" onclick="removeKeyword(${index})">×</span>
                    </div>
                `).join('');
            }
        }

        function addKeyword() {
            const keyword = prompt('Введите ключевое слово:');
            if (keyword) {
                state.keywords.push(keyword);
                renderKeywords();
                showNotification('Ключевое слово добавлено', 'success');
            }
        }

        function removeKeyword(index) {
            state.keywords.splice(index, 1);
            renderKeywords();
        }

        function renderEmojis() {
            const emojiList = document.getElementById('emojiList');
            if (emojiList) {
                emojiList.innerHTML = state.emojis.map((emoji, index) => `
                    <div class="keyword-tag">
                        ${emoji}
                        <span class="remove" onclick="removeEmoji(${index})">×</span>
                    </div>
                `).join('');
            }
        }

        function addEmoji() {
            const emoji = prompt('Введите эмодзи:');
            if (emoji) {
                state.emojis.push(emoji);
                renderEmojis();
                showNotification('Эмодзи добавлено', 'success');
            }
        }

        function removeEmoji(index) {
            state.emojis.splice(index, 1);
            renderEmojis();
        }

        // AI Direction
        function saveAIDirection() {
            const direction = document.getElementById('aiDirection').value;
            if (direction) {
                state.aiDirections.push({
                    id: Date.now(),
                    text: direction,
                    date: new Date()
                });
                renderAIDirections();
                document.getElementById('aiDirection').value = '';
                showNotification('Направление AI сохранено', 'success');
            }
        }

        function renderAIDirections() {
            const savedDirections = document.getElementById('savedDirections');
            if (savedDirections) {
                savedDirections.innerHTML = state.aiDirections.map(dir => `
                    <div class="toggle-item">
                        <div class="toggle-label">
                            <span>${dir.text.substring(0, 50)}...</span>
                            <small>Сохранено: ${formatTime(dir.date)}</small>
                        </div>
                        <button class="btn btn-danger btn-sm" onclick="removeAIDirection(${dir.id})">
                            🗑️ Удалить
                        </button>
                    </div>
                `).join('');
            }
        }

        function removeAIDirection(dirId) {
            state.aiDirections = state.aiDirections.filter(d => d.id !== dirId);
            renderAIDirections();
            showNotification('Направление удалено', 'danger');
        }

        // Analytics
        function showAnalyticsTab(tabName) {
            document.querySelectorAll('#analytics .tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            const content = document.getElementById('analyticsContent');
            
            if (tabName === 'overview') {
                content.innerHTML = `
                    <div class="stats-grid" style="grid-template-columns: repeat(4, 1fr);">
                        <div class="stat-card">
                            <div class="stat-value">1234</div>
                            <div class="stat-label">Проанализировано</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">312</div>
                            <div class="stat-label">Отправлено</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">6.4%</div>
                            <div class="stat-label">CTR</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">23</div>
                            <div class="stat-label">Активных чатов</div>
                        </div>
                    </div>
                `;
            } else if (tabName === 'bots') {
                content.innerHTML = `
                    <h4 style="margin-bottom: 15px;">Производительность по ботам</h4>
                    ${state.bots.map(bot => `
                        <div class="toggle-item" onclick="showBotAnalytics(${bot.id})">
                            <div class="toggle-label">
                                <span>${bot.name}</span>
                                <small>Сообщений: ${Math.floor(Math.random() * 500)} | CTR: ${(Math.random() * 10).toFixed(1)}%</small>
                            </div>
                            <button class="btn btn-secondary btn-sm">
                                📊 Подробнее
                            </button>
                        </div>
                    `).join('')}
                `;
            } else if (tabName === 'ai') {
                content.innerHTML = `
                    <h4 style="margin-bottom: 15px;">AI производительность</h4>
                    <div class="log-item">
                        <div class="log-time">Сегодня</div>
                        <div class="log-content">
                            <strong>Всего запросов:</strong> 1547<br>
                            <strong>Успешных генераций:</strong> 1523 (98.4%)<br>
                            <strong>Средняя длина ответа:</strong> 127 токенов<br>
                            <strong>Использовано токенов:</strong> 195,831
                        </div>
                    </div>
                    <button class="btn btn-secondary" style="margin-top: 15px;">
                        📥 Скачать отчет AI
                    </button>
                `;
            }
        }

        function showBotAnalytics(botId) {
            const bot = state.bots.find(b => b.id === botId);
            if (bot) {
                alert(`Детальная аналитика бота ${bot.name}:\n\nСообщений отправлено: 487\nКомментариев: 123\nРеакций: 654\nПереходов в канал: 31\n\nCTR: 6.4%\nСредняя активность: 78.3%`);
            }
        }

        // Bot Creation Flow
        function sendCode() {
            const phone = document.getElementById('botPhone').value;
            if (phone) {
                document.getElementById('codeInput').style.display = 'block';
                showNotification('Код отправлен на ' + phone, 'info');
                addLog('System', `Отправлен код на ${phone}`);
            }
        }

        function verifyCode() {
            const code = document.getElementById('smsCode').value;
            const name = document.getElementById('botName').value;
            const phone = document.getElementById('botPhone').value;
            
            if (code && name && phone) {
                const newBot = {
                    id: state.bots.length + 1,
                    name: name,
                    phone: phone,
                    status: 'active',
                    lastSeen: new Date()
                };
                state.bots.push(newBot);
                renderBots();
                closeModal('createBotModal');
                showNotification('Бот успешно создан', 'success');
                addLog('System', `Создан новый бот: ${name}`);
            }
        }

        // System functions
        function viewSystemLogs() {
            const logs = state.logs.map(log => 
                `${formatTime(log.time)} - ${log.bot}: ${log.message}`
            ).join('\n');
            alert('Системные логи:\n\n' + logs);
        }

        function clearLogs() {
            if (confirm('Очистить все логи?')) {
                state.logs = [];
                renderLogs();
                showNotification('Логи очищены', 'warning');
            }
        }

        // UI Helpers
        function toggleSwitch(element) {
            element.classList.toggle('active');
        }

        function openModal(modalId) {
            document.getElementById(modalId).classList.add('active');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }

        function openCreateBotModal() {
            document.getElementById('botName').value = '';
            document.getElementById('botPhone').value = '';
            document.getElementById('smsCode').value = '';
            document.getElementById('codeInput').style.display = 'none';
            openModal('createBotModal');
        }

        function openAddChannelModal() {
            document.getElementById('channelUsername').value = '';
            openModal('addChannelModal');
        }

        function openTemplateModal() {
            document.getElementById('templateName').value = '';
            document.getElementById('templatePrompt').value = '';
            openModal('templateModal');
        }

        function openTaskModal() {
            alert('Создание новой задачи - в разработке');
        }

        function showBotTab(tabType) {
            // Implementation for bot tabs
        }

        function showNotification(message, type = 'info') {
            // Simple notification (can be enhanced with toast library)
            console.log(`[${type.toUpperCase()}] ${message}`);
        }

        function formatTime(date) {
            const d = new Date(date);
            return d.toLocaleString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }
    </script>
</body>
</html>
